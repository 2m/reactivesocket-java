buildscript {
    repositories {
        jcenter()
    }

    dependencies { classpath 'io.reactivesocket:gradle-nebula-plugin-reactivesocket:1.0.1' }
}


subprojects {
    apply plugin: 'java'

    repositories {
        maven { url 'https://oss.jfrog.org/libs-snapshot' }
    }

    dependencies {
        compile 'io.reactivex:rxjava:1.0.13'
        compile 'io.reactivex:rxjava-reactive-streams:1.0.1'
        compile 'io.reactivesocket:reactivesocket:0.0.1-SNAPSHOT'
        compile 'uk.co.real-logic:Agrona:0.4.4'
        compile 'uk.co.real-logic:aeron-all:0.1.4'
        compile 'org.hdrhistogram:HdrHistogram:2.1.7'
        compile 'org.slf4j:slf4j-api:1.7.12'
        testCompile 'junit:junit-dep:4.10'
        testCompile 'org.mockito:mockito-core:1.8.5'
        testCompile 'org.slf4j:slf4j-simple:1.7.12'
    }
}

/*
buildscript {
    repositories {
        jcenter()
    }

    dependencies { classpath 'io.reactivesocket:gradle-nebula-plugin-reactivesocket:1.0.1' }
}

description = 'ReactiveSocket: stream oriented messaging passing with Reactive Stream semantics.'


repositories {
    maven { url 'https://oss.jfrog.org/libs-snapshot' }
}

subprojects {
    apply plugin: 'reactivesocket-project'
    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compile 'io.reactivex:rxjava:1.0.13'
        compile 'io.reactivex:rxjava-reactive-streams:1.0.1'
        compile 'io.reactivesocket:reactivesocket:0.0.1-SNAPSHOT'
        compile 'uk.co.real-logic:Agrona:0.4.4'
        compile 'uk.co.real-logic:aeron-all:0.1.4'
        compile 'org.hdrhistogram:HdrHistogram:2.1.7'
        compile 'org.slf4j:slf4j-api:1.7.12'
        testCompile 'junit:junit-dep:4.10'
        testCompile 'org.mockito:mockito-core:1.8.5'
        testCompile 'org.slf4j:slf4j-simple:1.7.12'
    }


    // support for snapshot/final releases via versioned branch names like 1.x
    nebulaRelease {
        addReleaseBranchPattern(/\d+\.\d+\.\d+/)
        addReleaseBranchPattern('HEAD')
    }

    if (project.hasProperty('release.useLastTag')) {
        tasks.prepare.enabled = false
    }
}


task(md, dependsOn: 'classes', type: JavaExec) {
    main = 'io.reactivesocket.aeron.example.MediaDriver'
    classpath = sourceSets.main.runtimeClasspath
}

task(ping, dependsOn: 'classes', type: JavaExec) {
    main = 'io.reactivesocket.aeron.example.Ping'
    classpath = sourceSets.main.runtimeClasspath
}

task(pong, dependsOn: 'classes', type: JavaExec) {
    main = 'io.reactivesocket.aeron.example.Pong'
    classpath = sourceSets.main.runtimeClasspath
}
 */